
# Include common GitLab CI macros
include: '.gitlab-ci.common.yml'

###################################################
## Mixins
###################################################
.bp_tools_mixin:
  variables:
    REPO_NAME: "black-parrot-tools"

###################################################
## Templates
###################################################

.image_template:
  extends: [.docker_template, .bp_tools_mixin]
  script:
    - echo "[CI] Building image ${CONTAINER_IMAGE}" | tee -a ${JOB_LOG}
    - >
      docker build docker -f docker/Dockerfile.${DOCKER_PLATFORM}
      --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from ${CONTAINER_IMAGE}
      --build-arg USER_NAME="${USER_NAME}"
      --build-arg USER_ID="${USER_ID}"
      --build-arg GROUP_NAME="${GROUP_NAME}"
      --build-arg GROUP_ID="${GROUP_ID}"
      --build-arg OTHER_GROUPS="${OTHER_GROUPS}"
      --build-arg WORKDIR="${WORKDIR}"
      -t ${CONTAINER_IMAGE} >> ${JOB_LOG} 2>&1

.tool_template:
  extends: [.install_template, .bp_tools_mixin]
  variables:
    INSTALL_ROOT: "install-${DOCKER_PLATFORM}"
    WORK_ROOT: "work-${DOCKER_PLATFORM}"
    # Template variables
    WORK_DIR: "${WORK_ROOT}-${TOOL}"
    INSTALL_DIR: "${INSTALL_ROOT}-${TOOL}"
    # Exported to make sure things go in the right place
    BP_WORK_DIR: "${CI_PROJECT_DIR}/${WORK_DIR}"
    BP_INSTALL_DIR: "${CI_PROJECT_DIR}/${INSTALL_DIR}"
  script:
    - echo "[CI] Doing makefile checkout" | tee -a ${JOB_LOG}
    - make -C ${GIT_SRC_DIR} -j${CORES_PER_JOB} checkout >> ${JOB_LOG} 2>&1
    - echo "[CI] Repatching ${TOOL}" | tee -a ${JOB_LOG}
    - make -C ${GIT_SRC_DIR} -j${CORES_PER_JOB} repatch.${TOOL} >> ${JOB_LOG} 2>&1
    - !reference [.git_anchors, git_unlock]
    - echo "[CI] Rebuilding ${TOOL}" | tee -a ${JOB_LOG}
    - make -C ${GIT_SRC_DIR} -j${CORES_PER_JOB} rebuild.${TOOL} >> ${JOB_LOG} 2>&1

.publish_template:
  extends: [.package_template, .bp_tools_mixin]
  variables:
    # Template variables
    PACKAGE_NAME: "tools-${DOCKER_PLATFORM}"
    PACKAGE_DIR: "install-${DOCKER_PLATFORM}"
    PACKAGE_VER: "${SHA}"
  stage: publish
  script:
    # This is only necessary because we're downloading all artifacts
    #   and need to separate out the correct platform artifacts
    - WILDCARD=*-${DOCKER_PLATFORM}-*.tar.gz
    - FILTERED_TGZ=$(ls ${WILDCARD})
    - echo "[CI] archives found for platform ${DOCKER_PLATFORM} ${FILTERED_TGZ}"
    - |
      for f in ${FILTERED_TGZ}; do
        tar -xzvf $f -C ${PACKAGE_DIR} --strip-components=1 >> ${JOB_LOG} 2>&1
      done

###################################################
## Workflow
###################################################

# Currently only run on pushes, merge requests do not run separately
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

stages:
  - image
  - build
  - publish

###################################################
## Actual Jobs
###################################################

# We couple dependencies here while we wait for this feature
# https://gitlab.com/gitlab-org/gitlab/-/issues/423456
# needs:
#  parallel:
#    matrix:
#      - DOCKER_PLATFORM: $DOCKER_PLATFORM

docker-image:
  extends: [.image_template]
  stage: image
  parallel:
    matrix:
      - DOCKER_PLATFORM: ["ubuntu24.04", "centos7"]
  rules: !reference [.image_template, rules]

install:
  extends: [.tool_template]
  stage: build
  parallel:
    matrix:
      - DOCKER_PLATFORM: ["ubuntu24.04", "centos7"]
        TOOL: ["boost", "verilator", "dromajo"]
      - DOCKER_PLATFORM: ["ubuntu24.04", "centos7"]
        TOOL: ["spike", "surelog", "yslang", "axe"]
      - DOCKER_PLATFORM: ["ubuntu24.04", "centos7"]
        TOOL: ["bsg_sv2v", "bsg_fakeram"]

publish:
  extends: [.publish_template]
  stage: publish
  parallel:
    matrix:
      - DOCKER_PLATFORM: ["ubuntu24.04", "centos7"]


