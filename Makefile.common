#############################
# Makefile functions
#############################
# Saves initial values so that we can filter them later
VARS_OLD := $(.VARIABLES)

# Global Makefile settings
SHELL := /bin/bash
EXTRAMAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += $(EXTRAMAKEFLAGS)

# Global help target
.DEFAULT_GOAL: help
.PHONY: help
help: ## prints this message
	@egrep -h '\s##\s' $(MAKEFILE_LIST) | sort \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-30s\033[0m %s\n", $$1, $$2}'

# Global reset
.PHONY: bleach_all
bleach_all: ## wipes the whole repo clean. Use with caution
	@$(CD) $(BP_TOOLS_DIR); git clean -ffdx; git submodule deinit -f .

define bsg_fn_upper
$(shell echo $(1) | tr a-z A-Z)
endef
define bsg_fn_lower
$(shell echo $(1) | tr A-Z a-z)
endef
bsg_var_blank :=
define bsg_var_newline

$(bsg_var_blank)
endef

bsg_var_percent := %

define bsg_fn_patch_if_new
	$(eval apply_stage_patch := git apply --ignore-whitespace --ignore-space-change)
	$(eval apply_commit_patch := git am --ignore-whitespace --ignore-space-change)
	$(eval check_patch := $(apply_stage_patch) --check --reverse)
	$(eval src_root := $(1))
	$(eval patch_root := $(2))
	$(eval patch_list := $(wildcard $(patch_root)/*.patch))
	$(eval patch_is_top := $(findstring patches,$(lastword $(subst /, ,$(dir $(patch_root))))))
	for p in $(patch_list); \
	do \
		echo "Checking if patch $$p is applicable"; \
		cd $(src_root); $(check_patch) $$p && continue; \
		echo "Patch is unapplied..."; \
		if [ ! -z "$$patch_is_top" ]; then \
			echo "Applying patch to sub-directory $(src_root);" \
			cd $(src_root); $(apply_commit_patch) $$p; \
			echo "Patch applied!"; \
		else \
			echo "Applying patch to top-level $(src_root);" \
			cd $(src_root); $(apply_stage_patch) $$p; \
			echo "Patch applied!"; \
		fi \
	done
endef

define bsg_tgt_build_tag
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval patch_dir := $(4))
	$(eval tag := $(5))
	$(eval patch_tag := $(touch_dir)/$(name).patch.$(tag))
	$(eval build_tag := $(touch_dir)/$(name).build.$(tag))
	$(eval patch_root := $(patch_dir)/$(lastword $(src_dir)))
	$(eval patch_target := patch.$(name))
	$(eval repatch_target := repatch.$(name))
	$(eval external_target := build.$(name))
	$(eval rebuild_target := rebuild.$(name))
	$(eval internal_target := $(src_dir)/.$(name)_build)
	$(eval MAKEFLAGS := $(filter-out $(EXTRAMAKEFLAGS),$(MAKEFLAGS)))
$(external_target): | $(build_tag)
$(rebuild_target):
	rm -f $(touch_dir)/$(name).build.*
	+$(MAKE) $(build_tag)
$(build_tag): | $(patch_tag)
	+$(MAKE) $(patch_target)
	+$(MAKE) $(internal_target)
	echo "Build of $(name) successful; ignore errors"
	touch $(build_tag)
$(patch_target): | $(patch_tag)
$(repatch_target):
	rm -f $(touch_dir)/$(name).patch.*
	if [ -f $(src_dir)/.git ]; then \
		git submodule deinit -f $(src_dir); \
		git submodule init $(src_dir); \
		git submodule update $(src_dir); \
	fi
	+$(MAKE) $(patch_tag)
$(patch_tag):
	if [ -f $(src_dir)/.git ]; then \
		echo "Synchronizing submodules for $(1)"; \
		git -C $(src_dir) submodule sync --recursive; \
		echo "Checking out submodules for $(1)"; \
		git -C $(src_dir) submodule update --init --recursive; \
	fi
	$(call bsg_fn_patch_if_new,$(src_dir),$(patch_root))
	echo "Patching successful; ignore errors"
	touch $(patch_tag)
endef

define bsg_tgt_build_if_missing
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval patch_dir := $(4))
	$(eval tag := any)
	$(call bsg_tgt_build_tag,$(name),$(src_dir),$(touch_dir),$(patch_dir),$(tag))
endef

define bsg_tgt_build_if_new
	$(eval name := $(1))
	$(eval src_dir := $(2))
	$(eval touch_dir := $(3))
	$(eval patch_dir := $(4))
	$(eval tag := $(shell cd $(src_dir); git rev-parse HEAD))
	$(call bsg_tgt_build_tag,$(name),$(src_dir),$(touch_dir),$(patch_dir),$(tag))
endef

define bsg_fn_info
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-INFO: ")
	echo "${$@_prefix} ${$@_msg}";
endef

define bsg_fn_warn
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-WARN: ")
	echo "${$@_prefix} ${$@_msg}";
endef

define bsg_fn_error
	$(eval $@_msg = $(1))
	$(eval $@_prefix = "BSG-ERROR: ")
	echo "${$@_prefix} ${$@_msg}"; \
	exit -1;
endef

#############################
# Paths
#############################
BP_TOOLS_DIR         ?= $(TOP)
BP_TOOLS_PATCH_DIR   ?= $(BP_TOOLS_DIR)/patches
BP_TOOLS_INSTALL_DIR ?= $(BP_TOOLS_DIR)/install
BP_TOOLS_DOCKER_DIR  ?= $(BP_TOOLS_DIR)/docker
BP_TOOLS_MK_DIR      ?= $(BP_TOOLS_DIR)/mk
BP_TOOLS_BIN_DIR     ?= $(BP_TOOLS_INSTALL_DIR)/bin
BP_TOOLS_LIB_DIR     ?= $(BP_TOOLS_INSTALL_DIR)/lib
BP_TOOLS_INCLUDE_DIR ?= $(BP_TOOLS_INSTALL_DIR)/include
BP_TOOLS_SHARE_DIR   ?= $(BP_TOOLS_INSTALL_DIR)/share
BP_TOOLS_TOUCH_DIR   ?= $(BP_TOOLS_INSTALL_DIR)/touchfiles
BP_TOOLS_WORK_DIR    ?= $(BP_TOOLS_INSTALL_DIR)/work

BP_TOOLS_AXE_DIR       ?= $(BP_TOOLS_DIR)/axe
BP_TOOLS_FAKERAM_DIR   ?= $(BP_TOOLS_DIR)/bsg_fakeram
BP_TOOLS_SV2V_DIR      ?= $(BP_TOOLS_DIR)/bsg_sv2v
BP_TOOLS_DROMAJO_DIR   ?= $(BP_TOOLS_DIR)/dromajo
BP_TOOLS_SPIKE_DIR     ?= $(BP_TOOLS_DIR)/riscv-isa-sim
BP_TOOLS_SURELOG_DIR   ?= $(BP_TOOLS_DIR)/Surelog
BP_TOOLS_VERILATOR_DIR ?= $(BP_TOOLS_DIR)/verilator
BP_TOOLS_YOSYS_DIR     ?= $(BP_TOOLS_DIR)/yosys
BP_TOOLS_YSLANG_DIR    ?= $(BP_TOOLS_DIR)/yosys-slang

BSG_CADENV_DIR         ?= $(BP_TOOLS_DIR)/bsg_cadenv

